@model EmailSender.Models.EmailSendModel
@{
    ViewBag.Title = "Home Page";
}

<div class="col-md-12">
    @using (Html.BeginForm("Index", "Home", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()
        <div class="row">
            @{
                if (!string.IsNullOrWhiteSpace(ViewBag.Message))
                {
                    <!-- Modal -->
                    <div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
                        <div class="modal-dialog" role="document">
                            <div class="modal-content">
                                
                                <div class="modal-body">
                                    <h4 class="modal-title" id="myModalLabel">Sending email</h4>
                                    <br />
                                    sending email to selected recipients...
                                    @*Email sending completed...*@
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-default modal-close">Close</button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                if (!string.IsNullOrWhiteSpace(ViewBag.Error))
                {
                    <div class="alert alert-danger" role="alert"> <strong>Oh snap!</strong> @ViewBag.Error</div>
                }
            }

        </div>
        <div class="row">
            <div class="col-md-4 col-lg-4 panel-container">
                <div class="box-panel panel panel-default" style="position:relative">
                    <div class="panel-body vertical-center text-center file-upload-container">
                        @Html.LabelFor(model => model.RecipientPath)
                        <div class="file btn btn-primary">
                            <span class="glyphicon glyphicon-upload" aria-hidden="true"></span>
                            Upload
                            <input type="file" class="form-control-file" id="RecipientPath" name="RecipientPath" required accept="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" />
                        </div>
                    </div>
                </div>

            </div>
            <div class="col-md-8 col-lg-8 panel-container">
                <div class="box-panel panel panel-default">
                    <div class="panel-body">
                        <div class="form-group col-md-6">
                            @Html.LabelFor(model => model.Subject)
                            @Html.EditorFor(model => model.Subject, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Subject, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group col-md-6">
                            @Html.LabelFor(model => model.Greeting)
                            @Html.EditorFor(model => model.Greeting, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Greeting, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group col-md-6">
                            @Html.LabelFor(model => model.CC)
                            @Html.EditorFor(model => model.CC, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.CC, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group col-md-6">
                            @Html.LabelFor(model => model.Bcc)
                            @Html.EditorFor(model => model.Bcc, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Bcc, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group col-md-12">
                            @Html.LabelFor(model => model.Body)
                            @Html.TextAreaFor(model => model.Body, new { @class = "form-control textarea-editor" })
                            @Html.ValidationMessageFor(model => model.Body, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group col-md-6">
                            @Html.LabelFor(model => model.AttachmentFile)
                            <div class="file btn btn-primary">
                                <span class="glyphicon glyphicon-upload" aria-hidden="true"></span>
                                Upload
                                <input type="file" class="form-control-file" id="AttachmentFile" name="AttachmentFile" />
                            </div>
                        </div>
                        <div class="form-group col-md-6">
                            <button type="submit" class="btn btn-primary pull-right">Submit</button>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    }

</div>

@section Scripts {
    @Scripts.Render("~/bundles/site")
    <link href="http://cdnjs.cloudflare.com/ajax/libs/summernote/0.8.2/summernote.css"
          rel="stylesheet">
}

